from aiogram import Router, F
from aiogram.types import Message
from app.keyboards.menus import CATALOG_BUTTON_TEXT, AI_ENTRY_BUTTON_TEXT, VISION_BUTTON_TEXT, POSM_BUTTON_TEXT
from app.services.brands import suggest_candidates, brand_card

router = Router()

MENU_TEXTS = {AI_ENTRY_BUTTON_TEXT, CATALOG_BUTTON_TEXT, VISION_BUTTON_TEXT, POSM_BUTTON_TEXT, '–ù–∞–∑–∞–¥', 'üîô –ù–∞–∑–∞–¥', '–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è'}

CATALOG_USERS: set[int] = set()

@router.message(F.text.in_({CATALOG_BUTTON_TEXT, "–ö–∞—Ç–∞–ª–æ–≥ –±—Ä–µ–Ω–¥–æ–≤", "üîé –ö–∞—Ç–∞–ª–æ–≥ –±—Ä–µ–Ω–¥–æ–≤"}))
async def catalog_enter(m: Message):
    CATALOG_USERS.add(m.from_user.id)
    await m.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (–∏–ª–∏ —á–∞—Å—Ç—å) ‚Äî –ø–æ–∫–∞–∂—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")

@router.message(lambda m: m.text and m.from_user and m.from_user.id in CATALOG_USERS and not m.text.startswith('/') and m.text not in MENU_TEXTS)
async def find(m: Message):
    q = (m.text or "").strip()
    if not q: 
        return
    items = suggest_candidates(q, top_n=15)
    if not items:
        await m.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à—ë–ª. –ü–æ–ø—Ä–æ–±—É–π —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return
    # –ø—Ä–æ—Å—Ç–∞—è –≤—ã–¥–∞—á–∞ —Å–ø–∏—Å–∫–æ–º
    lines = ["–ö–∞–Ω–¥–∏–¥–∞—Ç—ã:"]
    for it in items[:15]:
        lines.append("‚Ä¢ " + str(it))
    await m.answer("\n".join(lines))
